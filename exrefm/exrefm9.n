.if !\n(xx .so tmac.e
.SH
Visual and open mode summary
.PP
The following table summarizes the
.I visual
and
.I open
operations.
For each operation we indicate its general form,
whether it can take a
.I count ,
and whether it can be used as a
.I targeting
operation.
.TS H
allbox;
c s s s
l | c | c | lw(45)
l | l | l | l.
Open and visual operations
_
Operation	Count?	Target?	Description
_
.TH
a\fItext\|\fR\s-2ESC\s0	yes	no	Append \fItext\fR after cursor
b	yes	yes	Backwards words
c\fItarget\fR\|\fItext\|\fR\s-2ESC\s0	no	no	\fRChange \fItarget\fR to \fItext\fR
d\fItarget\fR	yes	no	Delete \fItarget\fR
e	yes	yes	To end of word (unimplemented)
f\fIchar\fR	yes	yes	Find \fIchar\fR to right of cursor
g\fItarget\fR	no	no	Define previous inserted text
h (\(<-)	yes	yes	Backwards characters (like \s-2CTRL\s0(H))
i\fItext\|\fR\s-2ESC\s0	yes	no	Insert \fItext\fR before cursor
j (\(da)	yes	no	Cursor down lines, same column if possible
k (\(ua)	yes	no	Cursor up lines, same column
l (\(->)	yes	yes	Forwards character
n	no	no	T{
To next line matching the previous
.I scanning
regular expression (as described below)
in the direction of the previous
.I open
or
.I visual
intraline search using `/' or `?'.
T}
o\fItext\fR\|\s-2ESC\s0	yes	no	T{
Open a new line after the current line
leaving room for the specified number of physical lines.
Enter text insert mode on that line.
T}
p	no	no	T{
Put the text lines last deleted with `\e\e' or the last
yanked `Y' lines after the current line.
If the last deletion was of part of a line rather than a `Y' or `\e\e'
then that deleted text is place in the current line after the cursor.
T}
q	no	no	T{
Quit \fIopen\fR or \fIvisual\fR,
returning to command mode.
The command level
.I undo
can reverse the entire
.I open
or
.I visual
command.
T}
r\fIchar\fR	yes	no	T{
Replace each of the specified number of characters with a \fIchar\fR
T}
s\fItext\fR\|\s-2ESC\s0	yes	no	T{
Replace the specified number of characters with
the specified \fItext\fR
T}
t\fIchar\fR	yes	yes	Cursor right to just before \fIchar\fR
u	no	no	Undo last change
v	no	no	T{
(In \fIopen\fR) do command mode `z=' returning to \fIopen\fR mode on current line.
T}
v\fIspec\fR	yes	no	T{
(In
.I visual )
with \fIspec\fR one of
`\fB.\fR', `\-', `\(ua' or `^', `+', or
.SM CR
or
.SM NL
does the specified type of
.I visual
command at the specified line, defaulting to the current line
T}
w	yes	yes	Forward to beginning of each word
x	yes	no	Delete characters
y\fItarget\fR	no	no	Define previous deleted text
z	-	-	Synonym for \fIv\fR
A\fIstr\fR\|\s-2ESC\s0	yes	no	Append at end (short for `$a')
B	yes	yes	Back word (simple blank/non-blank)
C\fIstr\fR\|\s-2ESC\s0	no	no	Change to end (short for `c$')
D	no	no	Delete to end (short for `d$')
E	yes	yes	Back to end of previous word (unimplemented)
F\fIchar\fR	yes	yes	Find \fIchar\fR to left of cursor
G	yes	no	Goto specified line; last line default
H	no	no	To first non-blank on first screen line
I	yes	no	Insert before first non-blank character (i.e. `^i')
J	yes	no	Join lines
K\fIx\fR	no	no	Mark current line in mark register \fIx\fR
L	no	no	To first non-blank character on last screen line
O\fItext\fR\|\s-2ESC\s0	yes	no	Like \fIo\fR but before current line
P	no	no	Like \fIp\fR but before current line or before cursor
R\fItext\fR\|\s-2ESC\s0	no	no	Replace (overstrike) with input \fItext\fR
S\fItext\fR\|\s-2ESC\s0	yes	no	Replace specified number of lines
T	yes	yes	Like \fIt\fR but scanning to left of cursor
W	yes	yes	Forward word (simple blank/non-blank)
X	yes	no	Delete preceding characters
Y	yes	no	T{
Yank lines, copying them without deleting them so that
they may be put with \fIp\fR or \fIP\fR.
T}
\s-2SPACE\s0	yes	yes	Right one character
0	no	yes	To first character of line
\(ua or ^	no	yes	To first non-white character
$	no	yes	To end-of-line
@	no	no	Delete characters before cursor
#	yes	no	T{
Delete characters backwards, starting
with the character under the cursor
T}
\&\fB.\fR	no	no	Repeat last modifying command
;	yes	yes	Repeat last \fIf\fR, \fIF\fR, \fIt\fR, or \fIT\fR operation
\e\e	yes	no	Delete lines
+ or \s-2CR\s0	yes	no	Forward lines to first non-blank
\-	yes	no	Backwards lines to first non-blank
/\fIre\fR\|\s-2ESC\s0	no	no	T{
Forward to first line matching \fIre\fR.
To cancel the search, send a \s-2DELETE\s0 or \s-2RUBOUT\s0.
T}
?\fIre\fR\|\s-2ESC\s0	no	no	To previous line matching \fIre\fR
/\fIre\fR\|/z\fItype\fR\|\s-2ESC\s0	no	no	T{
(In visual) performs the specified type of a
.I z
or
.I v
command before the target specified with
/\fIre\|\fR/ or ?\fIre\fR?.
T}
|	yes	yes	T{
To specified column or column before last up/down line movement
T}
\s-2CTRL\s0(D)	yes	no	T{
Down \fIscroll\fR lines;
in \fIvisual\fR hold the cursor's relative position on
the screen.
If a count is given it becomes the number of logical
lines to scroll in
.I open
or
.I visual
until another such count is given.
T}
\s-2CTRL\s0(S)	no	no	Do a \fIsync\fR command
\s-2CTRL\s0(W)	yes	yes	Synonym for `B'
\s-2CTRL\s0(X)	no	no	Synonym for `@'
\s-2CTRL\s0(Z)	no	no	Maximize information on screen (clean-up)
\s-2ESC\s0	-	-	Cancel partially formed command
\s-2RUB\s0	-	-	T{
Cancel a partially formed command.
If repeated, drop out to \fIcommand\fR mode
T}
\s-2QUIT\s0	-	-	Drop out to \fIcommand\fR mode
.TE
.SH
Text insertion mode corrections
.PP
The following sequences are used in making corrections to text being
added in
.I "text insertion"
mode.
They are also used when entering the regular expression
.I re
for a interline search using
`/' or `?'.
.TS
box center;
c s
l | l
a | l.
Text insertion mode editing sequences
_
Sequence	Action
_
\s-2CTRL\s0(H)	Back a character
@	Delete all input on current line
\s-2CTRL\s0(X)	Synonym for `@'
\s-2CTRL\s0(W)	Delete a word (simple blank/non-blank definition)
\s-2RUB\s0	Drop out of text insert, and also \fIvisual\fR or \fIopen\fR
\s-2QUIT\s0	Like \s-2RUB\s0
\e\fIspecial\fR	With special any of the above chars, gives \fIspecial\fR
\s-2CR\s0 or \s-2NL\s0	End current line, rest of text to a new, following line
\s-2ESC\s0	Terminate the \fItext\fR
.TE
.bp
